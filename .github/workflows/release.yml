name: Build and Release Powerlang

# This workflow runs when a new tag starting with 'v' is pushed
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    # It runs on two different operating systems in parallel
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Step 3: Install Linux Dependencies (only runs on Ubuntu)
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev python3-gstreamer-1.0 gir1.2-gst-plugins-base-1.0 portaudio19-dev

    # Step 4: Install Python libraries from requirements.txt
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 5: Run PyInstaller to build the executable
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --name Powerlang --onefile --windowed --add-data "database.py:." --add-data "tts_handler.py:." --add-data "translations.py:." powerlang.py

    # --- Step 6: Package the artifacts (Corrected with separate steps) ---
    
    - name: Package for Windows
      if: runner.os == 'Windows'
      shell: pwsh # Use PowerShell for better cross-platform compatibility in shell commands
      run: |
        mkdir release_package
        mv dist/Powerlang.exe release_package/
        mv README.md release_package/
        Compress-Archive -Path ./release_package/* -DestinationPath ./Powerlang-Windows.zip

    - name: Package for Linux
      if: runner.os == 'Linux'
      run: |
        mkdir release_package
        mv dist/Powerlang release_package/
        mv README.md release_package/
        tar -czvf Powerlang-Linux.tar.gz -C release_package .

    # --- Step 7: Upload the artifacts (Corrected with separate steps) ---

    - name: Upload Windows Artifact
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: Powerlang-Windows
        path: Powerlang-Windows.zip
    
    - name: Upload Linux Artifact
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: Powerlang-Linux
        path: Powerlang-Linux.tar.gz

  # This job creates the GitHub Release after the build jobs are successful
  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Download all the packaged files from the build jobs
    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: Powerlang-Windows

    - name: Download Linux artifact
      uses: actions/download-artifact@v3
      with:
        name: Powerlang-Linux
        
    # Step 2: Create the GitHub Release and upload the files
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        # Use the tag name as the release name and generate release notes automatically
        name: Powerlang ${{ github.ref_name }}
        generate_release_notes: true 
        # The files to upload
        files: |
          Powerlang-Windows.zip
          Powerlang-Linux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}